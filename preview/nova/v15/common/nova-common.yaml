openapi: 3.0.0

info:
  title: NOVA v15 Common
  version: 0.0.1-SNAPSHOT
  description: >-
    OpenAPI specification contains all those types that are valid for multiple REST resources of NOVA.
    
    Please be aware that this specfication does not offer any operations but is a pure source basic data types.
  contact:
    name: NOVA Development Team
    url: 'https://tillmannschall.github.io/nova/'
    email: nova@sbb.ch
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'

paths:
  # OpenAPI standard requires to define at least 1 operation. This API however seems to be a pure type definition. 
  # So we define NOP operation here as workaround.
  /nop:
    get:
      operationId: noOperation
      responses:
        '200':
          description: Nothing is the result of nop ;-)

components:
  responses:
    # ch.voev.nova.services.nova.v15.common.ErrorResponse
    ErrorResponse:
      description: >-
        Generic error response that is used by all NOVA services to indicate technical problems. Returned data structure is compliant with Problem JSON.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'


  schemas:
    # ch.voev.nova.services.nova.v15.common.NOVARequest
    NOVARequest:
      discriminator:
        propertyName: objectType
        mapping:
          NOVARequest: '#/components/schemas/NOVARequest'
          OfferRequest: '../pricing/nova-pricing.yaml#/components/schemas/OfferRequest'
      type: object
      properties:
        objectType:
          description: Attribute is used as discriminator for inheritance between data types.
          type: string
      required:
        - objectType
    # ch.voev.nova.services.nova.v15.common.Message
    Message:
      description: >-
        Type represents a message that can be returned by any NOVA REST resource. The message contains a literal description as well as a message ID that can be used to identify the message.
        
         Please be aware that depending on the message not localizations for all languages will be provided.
      type: object
      properties:
        messageID: 
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: true
          readOnly: true
        messageType: 
          $ref: '#/components/schemas/MessageType'
        localizations: 
          type: array
          items:
            $ref: '#/components/schemas/LocalizedText'
          minItems: 0
        defaultText: 
          $ref: '#/components/schemas/LocalizedText'
      required:
        - messageID
    # ch.voev.nova.services.nova.v15.common.LocalizedText
    LocalizedText:
      type: object
      properties:
        text: 
          type: string
          readOnly: true
        language: 
          type: string
          readOnly: true
    # ch.voev.nova.services.nova.v15.common.Problem
    Problem:
      description: >-
        Data structure represents a technical problem that occurred during a REST call (aka as Problem JSON). It is compatible with problem structure as it is defined in RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807).
        
        In NOVA context problems are only used to indicate technical problems. Business problems need to provide way more context and thus will be part of response data structure.
        
      type: object
      properties:
        title: 
          description: >-
            A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
            Consumers MUST use the "type" string as the primary identifier for the problem type; the "title" string is advisory and included only for users who are not aware of the semantics of the URI and do not have the ability to discover them.
          type: string
          nullable: false
          readOnly: true
        status: 
          description: >-
            The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
          type: integer
          format: int32
          nullable: false
          readOnly: true
        type: 
          description: >-
            A URI reference [RFC3986] that identifies the problem type. When this member is not present, its value is assumed to be "about:blank".
          type: string
          nullable: false
          readOnly: true
          default: "about:blank"
        detail: 
          description: >-
            A human-readable explanation specific to this occurrence of the problem.
          type: string
          readOnly: true
        instance: 
          description: >-
            A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
          type: string
          readOnly: true
      required:
        - title
        - status
        - type
    # ch.voev.nova.services.nova.v15.common.NOVAResponse
    NOVAResponse:
      discriminator:
        propertyName: objectType
        mapping:
          NOVAResponse: '#/components/schemas/NOVAResponse'
          OfferResponse: '../pricing/nova-pricing.yaml#/components/schemas/OfferResponse'
      type: object
      properties:
        objectType:
          description: Attribute is used as discriminator for inheritance between data types.
          type: string
        messages: 
          type: array
          items:
            $ref: '#/components/schemas/Message'
          minItems: 0
      required:
        - objectType
    # ch.voev.nova.services.nova.v15.common.DidokCode
    DidokCode:
      description: >-
        Data structure describes codes for different kinds of sales locations. These codes are managed by a system outside NOVA named DIDOK. In NOVA DIDOK codes are used to identify point of sales physical as well as logical ones.
      type: object
      properties:
        code: 
          description: >-
            Code value of a sales location as it was defined by DIDOK.
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: true
          readOnly: true
      required:
        - code

    
    # ch.voev.nova.services.nova.v15.common.MessageType
    MessageType:
      description: >-
        Enumeration defines the possible types of messages that can be returned from calls to NOVA REST resources.
      type: string
      enum:
        - INFO
        - WARNING
        - ERROR

