openapi: 3.0.0

servers:
  - url: https://demo-nova.sbb.ch
  - url: https://test-nova.sbb.ch
  - url: https://inte-nova.sbb.ch
    description: >- 
      NOVA Pricing INTE environment can be used for any kind of test purposes. It's is working with current production master data.
  - url: https://nova.sbb.ch

info:
  title: NOVA v15 Pricing
  version: 0.0.1-SNAPSHOT
  contact:
    name: NOVA Development Team
    url: 'https://tillmannschall.github.io/nova/'
    email: nova@sbb.ch
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'

paths:
  # PricingService
  /nova/v15/pricing/offers/connection-offers:
    post:
      operationId: createConnectionOffers
      parameters:
        - name: tkid
          in: header
          description: >- 
            TODO Please add comment
          required: false
          schema:
            type: string
        - name: Authorization
          in: header
          description: >- 
            Authorization header is required for all requests to NOVA. In compliance with SBB / NOVA Zero-Trust policy, starting from NOVA 15, all clients need to have an authentication for the channel itself and for the acting user. Both information need to be provided within the authorization token.
            
            NOVA will still support requests from anonymous end users but in this case all features that somehow need access to personal data (e.g. TKID) will not be available.
            
          required: true
          schema:
            type: string
        - name: Conversation-Id
          in: header
          description: >- 
            Conversation id is used to group together a sequence of REST calls to NOVA. All requests that belong to the same business process are supposed to have the same conversation id.
          required: false
          schema:
            type: string
        - name: Accept-Language
          in: header
          description: >- 
            <html light="true"><body>Preferred language of the requesting client. Attribute can be filled according to logic of HTTP Header field as defined on <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language">Accept-Language</a>. This explicitly includes weighting of languages (e.g. &quot;fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5&quot;).<br><br>However please be aware that NOVA in general only supports the languages &quot;de&quot;, &quot;fr&quot;, &quot;it&quot; and &quot;en&quot;.<br><br>Even though the parameter is optional it's strongly recommended to provide it in requests. If not default language will be used. Please be aware that NOVA's default language is not explicitly defined and may change over time without prior notice.</body></html>
          required: false
          schema:
            type: string
        - name: Date-Shift
          in: header
          description: >- 
            Header field can be used to modify the date part of the request time stamp. It can either be defined as an absolute date in format YYYY-MM-DD or as an relative shift using '+' / '-' in combination with a shift value as absolute number for the amount of days that should be shifted (e.g. "-7" or "+2" days). 
            
            Date shift is only supported on non productive environments.
          required: false
          schema:
            type: string
        - name: Time-Shift
          in: header
          description: >- 
            Header field can be used to modify the time part of the request time stamp. It can either be defined as an absolute time in format HH:mm:ss or as an relative shift using '+' / '-' in combination with a shift value as absolute number for the amount of minutes that should be shifted (e.g. "-31" or "+120" minutes). 
            
            Time shift is only supported on non productive environments.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >- 
            TODO Please add comment
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/OfferResponse'
        '400':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '401':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '403':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '500':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        'default':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
  /nova/v15/pricing/offers/trip-search-offers:
    post:
      operationId: createTripSearchOffers
      responses:
        '200':
          description: >- 
            TODO Please add comment
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/OfferResponse'
        '400':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '401':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '403':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '500':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        'default':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
  /nova/v15/pricing/offers/interval-search-offers:
    post:
      operationId: createIntervalSearchOffers
      responses:
        '200':
          description: >- 
            TODO Please add comment
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/OfferResponse'
        '400':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '401':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '403':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        '500':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'
        'default':
          $ref: '../common/nova-common.yaml#/components/responses/ErrorResponse'


components:

  schemas:
    # ch.voev.nova.services.nova.v15.pricing.OfferRequest
    OfferRequest:
      allOf:
        - $ref: '../common/nova-common.yaml#/components/schemas/NOVARequest'
      type: object
    # ch.voev.nova.services.nova.v15.pricing.OfferResponse
    OfferResponse:
      allOf:
        - $ref: '../common/nova-common.yaml#/components/schemas/NOVAResponse'
      type: object
      properties:
        offers: 
          type: array
          items:
            $ref: '#/components/schemas/Offer'
          minItems: 0
    # ch.voev.nova.services.nova.v15.pricing.Offer
    Offer:
      type: object

    
